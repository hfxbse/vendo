name: "firmware-builder"
run-name: "Flutter vending machine firmware builder"
on:
  workflow_run:
    workflows:
      - test-runner
    types:
      - completed
    branches:
      - main

jobs:
  version-check:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.new_version.outputs.NEW_VERSION }}
      action: ${{ steps.action_setter.outputs.ACTION }}
    
    steps:
      - uses: actions/checkout@v4
        name: "Checkout repository"
        with:
          fetch-depth: 0

      - uses: "WyriHaximus/github-action-get-previous-tag@v1"
        name: "Determine previous released project version"
        id: prev_version
        with:
          fallback: 0.0.0

      - run: "echo \"VERSION=$(cat pubspec.yaml | grep version | grep -oE '[^: ]+$')\" >> $GITHUB_OUTPUT"
        name: "Determine current project version"
        id: cur_version

      - run: "echo NEW_VERSION=$(echo -e \"${{ steps.prev_version.outputs.tag}}\n${{ steps.cur_version.outputs.VERSION}}\" | sort -V | tail -n 1) >> $GITHUB_OUTPUT"
        name: "Compare previous and current version"
        id: new_version

      - run: "echo ACTION=rebuild >> $GITHUB_OUTPUT"
        name: "Mark application for rebuild"
        id: action_setter
        if: ${{ steps.cur_version.outputs.VERSION != steps.prev_version.outputs.tag &&
          steps.new_version.outputs.NEW_VERSION == steps.cur_version.outputs.VERSION }}
  
  
  build-embedder:
    needs:
      - version-check
    
    if: ${{ needs.version-check.outputs.action == 'rebuild' }}

    runs-on: ubuntu-latest
    container: ghcr.io/hfxbse/vendo/flutter-pi-builder:latest

    steps:
      - uses: actions/checkout@v4
        name: "Checkout Flutter-Pi submodule"
        with:
          submodules: true

      - run: bash /build.sh
        name: "Build Flutter Pi"
        working-directory: ./embedder/flutter-pi

      - uses: actions/upload-artifact@v4
        name: "Upload embedder binary artifact"
        with:
          name: embedder
          path: ./embedder/flutter-pi/build/flutter-pi

  build-firmware:
    needs:
      - version-check

    if: ${{ needs.version-check.outputs.action == 'rebuild' }}

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        name: "Checkout repository"

      - uses: subosito/flutter-action@v2
        name: "Setup Flutter SDK"
        with:
          channel: "stable"
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:"
          flutter-version: 3.22.2

      - run: flutter config --no-analytics
        name: "Disable Flutter analytics"

      - run: flutter pub get --precompile
        name: "Get Flutter dependencies"

      - run: dart run build_runner:build_runner build
        name: "Generate generated source files"

      - run: dart run flutterpi_tool build --arch=arm64 --cpu=pi3 --release
        name: "Compile Flutter application"

      - name: "Archive firmware"
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: zip
          filename: firmware.zip
          path: ./firmware
          command: "mv ./build/flutter_assets ./firmware"

      - uses: actions/upload-artifact@v4
        name: "Upload firmware binary artifact"
        with:
          name: firmware
          path: firmware.zip

  create-release:
    runs-on: ubuntu-latest
    container: ghcr.io/hfxbse/vendo/deb-packager:latest

    permissions:
      contents: write

    needs:
      - version-check
      - build-embedder
      - build-firmware

    steps:
      - uses: actions/checkout@v4
        name: "Checkout repository"

      - uses: actions/download-artifact@v4
        name: "Download embedder binary artifact"
        with:
          path: ./package/usr/bin
          name: embedder
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: chmod +x ./package/usr/bin/*
        name: "Mark programs as executable"

      - uses: actions/download-artifact@v4
        name: "Download firmware binary artifact"
        with:
          path: .
          name: firmware
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: rm ./package/packager.Dockerfile
        name: "Remove packager environment Dockerfile in release package"

      - run: mkdir -p ./package/opt/
        name: "Create package file hierarchy"

      - run: unzip firmware.zip -d .
        name: "Unzip firmware binary artifact"

      - run: mv firmware ./package/opt/vendo
        name: "Move firmware to final destination"

      - run: "echo \"Version: ${{ needs.version-check.outputs.version }}\" >> ./package/DEBIAN/control"
        name: "Set package version"

      - run: echo RELEASE_NAME=vendo_${{ needs.version-check.outputs.version }}_arm64 >> $GITHUB_OUTPUT
        name: "Determine package release name"
        id: release_name

      - run: mv package ${{ steps.release_name.outputs.RELEASE_NAME }}
        name: "Rename package to release name"

      - run: dpkg-deb --build --root-owner-group ${{ steps.release_name.outputs.RELEASE_NAME }}
        name: "Package release"

      - run: mv README.md ${{ steps.release_name.outputs.RELEASE_NAME }}
        name: "Include README in tarball release"

      - run: rm -r ${{ steps.release_name.outputs.RELEASE_NAME }}/DEBIAN
        name: "Remove Debian package configuration in tarball release"

      - name: "Create release archive file"
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: zip
          filename: ./${{ steps.release_name.outputs.RELEASE_NAME }}.zip
          path: ${{ steps.release_name.outputs.RELEASE_NAME }}

      - uses: ncipollo/release-action@v1
        name: "Create binary release"
        with:
          artifacts: ./${{ steps.release_name.outputs.RELEASE_NAME }}.*
          tag: ${{ needs.version-check.outputs.version }}
          prerelease: true


