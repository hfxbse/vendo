name: "firmware-builder"
run-name: "Flutter vending machine firmware builder"
on:
  push:
    tags:
      - '*'
    branches:
      - main
    paths-ignore:
      - embedder/**
      - README
jobs:
  build-embedder:
    runs-on: ubuntu-latest
    container: ghcr.io/hfxbse/vendo/flutter-pi-builder:latest

    steps:
      - uses: actions/checkout@v4
        name: "Checkout Flutter-Pi submodule"
        with:
          submodules: true

      - run: bash /build.sh
        name: "Build Flutter Pi"
        working-directory: ./embedder/flutter-pi

      - uses: actions/upload-artifact@v4
        name: "Upload embedder binary artifact"
        with:
          name: embedder
          path: ./embedder/flutter-pi/build/flutter-pi

  build-firmware:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        name: "Checkout repository"

      - uses: subosito/flutter-action@v2
        name: "Setup Flutter SDK"
        with:
          channel: "stable"

      - run: flutter config --no-analytics
        name: "Disable Flutter analytics"

      - run: flutter pub get --precompile
        name: "Get Flutter dependencies"

      - run: dart run build_runner:build_runner build
        name: "Generate generated source files"

      - run: flutter test
        name: "Run tests"

      - run: dart run flutterpi_tool build --arch=arm64 --cpu=pi3 --release
        name: "Compile Flutter application"

      - name: "Archive firmware"
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: zip
          filename: firmware.zip
          path: ./firmware
          command: "mv ./build/flutter_assets ./firmware"

      - uses: actions/upload-artifact@v4
        name: "Upload firmware binary artifact"
        with:
          name: firmware
          path: firmware.zip

  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build-embedder
      - build-firmware

    steps:
      - uses: actions/checkout@v4
        name: "Checkout repository"

      - run: "echo \"VERSION=$(cat pubspec.yaml | grep version | grep -oE '[^: ]+$')\" >> $GITHUB_OUTPUT"
        name: "Determine version"
        id: version_probe

      - run: mkdir vendo
        name: "Create release directory"

      - run: mv README.md vendo
        name: "Include README in release"

      - uses: actions/download-artifact@v4
        name: "Download embedder binary artifact"
        with:
          path: ./vendo
          name: embedder
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v4
        name: "Download firmware binary artifact"
        with:
          path: .
          name: firmware
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: unzip firmware.zip -d vendo
        name: "Unzip firmware binary artifact"

      - name: "Create release archive file"
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: zip
          filename: ./vendo.zip
          path: ./vendo

      - uses: ncipollo/release-action@v1
        name: "Create binary release"
        with:
          artifacts: "./vendo.zip"
          tag: ${{ steps.version_probe.outputs.VERSION }}


